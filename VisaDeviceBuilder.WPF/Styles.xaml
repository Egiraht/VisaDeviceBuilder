<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:visa="clr-namespace:VisaDeviceBuilder;assembly=VisaDeviceBuilder"
                    xmlns:local="clr-namespace:VisaDeviceBuilder.WPF"
                    xmlns:res="clr-namespace:VisaDeviceBuilder.WPF.Resources">
  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent" />
  <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="Black" />
  <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
  <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />

  <Style TargetType="Control">
    <Setter Property="Margin" Value="2" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
  </Style>

  <Style TargetType="Button" BasedOn="{StaticResource {x:Type Control}}" />
  <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type Control}}" />
  <Style TargetType="ComboBox" BasedOn="{StaticResource {x:Type Control}}" />
  <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type Control}}" />
  <Style TargetType="Separator" BasedOn="{StaticResource {x:Type Control}}" />

  <Style TargetType="DataGrid" BasedOn="{StaticResource {x:Type Control}}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Background" Value="DarkGray" />
    <Setter Property="VerticalGridLinesBrush" Value="DarkGray" />
    <Setter Property="HorizontalGridLinesBrush" Value="DarkGray" />
    <Setter Property="SelectionMode" Value="Single" />
    <Setter Property="SelectionUnit" Value="Cell" />
    <Setter Property="AutoGenerateColumns" Value="False" />
    <Setter Property="HeadersVisibility" Value="Column" />
    <Setter Property="CanUserAddRows" Value="False" />
    <Setter Property="CanUserDeleteRows" Value="False" />
    <Setter Property="CanUserReorderColumns" Value="False" />
    <Setter Property="CanUserSortColumns" Value="False" />
    <Setter Property="CanUserResizeColumns" Value="True" />
    <Setter Property="CanUserResizeRows" Value="False" />
  </Style>

  <Style TargetType="DataGridRow">
    <Setter Property="Background" Value="DarkGray" />
  </Style>

  <Style TargetType="DataGridCell">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="LightGray" />
    <Setter Property="BorderBrush" Value="LightGray" />

    <Style.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="LightSteelBlue" />
        <Setter Property="BorderBrush" Value="LightSteelBlue" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="DotIndicatorStyle" TargetType="ToggleButton">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Ellipse x:Name="DotIndicatorEllipse"
                   Stroke="DimGray" StrokeThickness="1" Fill="Transparent"
                   Width="14" Height="14" Margin="5"
                   HorizontalAlignment="Center" VerticalAlignment="Center" />

          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="DotIndicatorEllipse" Property="Fill">
                <Setter.Value>
                  <RadialGradientBrush>
                    <GradientStop Offset="0.33" Color="DimGray" />
                    <GradientStop Offset="1.0" Color="Transparent" />
                  </RadialGradientBrush>
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EnableOnDeviceIsDisconnectedStyle" TargetType="Control" BasedOn="{StaticResource {x:Type Control}}">
    <Setter Property="IsEnabled" Value="False" />

    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.CanConnect}"
        Value="True">
        <Setter Property="IsEnabled" Value="True" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="EnableOnDeviceIsReadyStyle" TargetType="Control" BasedOn="{StaticResource {x:Type Control}}">
    <Setter Property="IsEnabled" Value="False" />

    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.IsDeviceReady}"
        Value="True">
        <Setter Property="IsEnabled" Value="True" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="DeviceStateDisplayStyle" TargetType="ContentControl" BasedOn="{StaticResource {x:Type Control}}">
    <Setter Property="Content" Value="{x:Static res:Localization.Disconnected}" />
    <Setter Property="Foreground" Value="Gray" />

    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.ConnectionState}"
        Value="{x:Static visa:DeviceConnectionState.Disconnected}">
        <Setter Property="Content" Value="{x:Static res:Localization.Disconnected}" />
        <Setter Property="Foreground" Value="Gray" />
      </DataTrigger>

      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.ConnectionState}"
        Value="{x:Static visa:DeviceConnectionState.Initializing}">
        <Setter Property="Content" Value="{x:Static res:Localization.Initializing}" />
        <Setter Property="Foreground" Value="Blue" />
      </DataTrigger>

      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.ConnectionState}"
        Value="{x:Static visa:DeviceConnectionState.Connected}">
        <Setter Property="Content" Value="{x:Static res:Localization.Connected}" />
        <Setter Property="Foreground" Value="Green" />
      </DataTrigger>

      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.ConnectionState}"
        Value="{x:Static visa:DeviceConnectionState.DeInitializing}">
        <Setter Property="Content" Value="{x:Static res:Localization.DeInitializing}" />
        <Setter Property="Foreground" Value="Blue" />
      </DataTrigger>

      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.ConnectionState}"
        Value="{x:Static visa:DeviceConnectionState.DisconnectedWithError}">
        <Setter Property="Content" Value="{x:Static res:Localization.Error}" />
        <Setter Property="Foreground" Value="Red" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="EnableOnDeviceIsMessageDeviceStyle" TargetType="Control"
         BasedOn="{StaticResource EnableOnDeviceIsReadyStyle}">
    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.IsMessageDevice}"
        Value="False">
        <Setter Property="IsEnabled" Value="False" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ShowOnMessageInputPanelEnabled" TargetType="Control"
         BasedOn="{StaticResource EnableOnDeviceIsMessageDeviceStyle}">
    <Setter Property="Visibility" Value="Collapsed" />

    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=IsMessageInputPanelEnabled}"
        Value="True">
        <Setter Property="Visibility" Value="Visible" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="AsyncPropertiesGridStyle" TargetType="DataGrid" BasedOn="{StaticResource {x:Type DataGrid}}">
    <Setter Property="IsEnabled" Value="False" />

    <Style.Triggers>
      <DataTrigger
        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=local:DeviceControlPanel}, Path=ViewModel.IsDeviceReady}"
        Value="True">
        <Setter Property="IsEnabled" Value="True" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="AsyncPropertiesGridElementStyle" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="TextWrapping" Value="Wrap" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="AsyncPropertiesGridCellStyle" TargetType="DataGridCell"
         BasedOn="{StaticResource {x:Type DataGridCell}}">
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGridCell.Column).DisplayIndex}"
                     Value="1" />
          <Condition Binding="{Binding (visa:AsyncPropertyMetadata.AsyncProperty).CanGet}" Value="False" />
        </MultiDataTrigger.Conditions>

        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="IsEnabled" Value="False" />
      </MultiDataTrigger>

      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(DataGridCell.Column).DisplayIndex}"
                     Value="2" />
          <Condition Binding="{Binding (visa:AsyncPropertyMetadata.AsyncProperty).CanSet}" Value="False" />
        </MultiDataTrigger.Conditions>

        <Setter Property="Visibility" Value="Hidden" />
        <Setter Property="IsEnabled" Value="False" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>
